"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8610],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>h});var a=n(67294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,l=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),h=r,m=c["".concat(l,".").concat(h)]||c[h]||d[h]||o;return n?a.createElement(m,i(i({ref:t},u),{},{components:n})):a.createElement(m,i({ref:t},u))}));function h(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=c;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:r,i[1]=s;for(var p=2;p<o;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},89187:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=n(83117),r=(n(67294),n(3905));const o={title:"Reading Owners On Datasets/Columns",slug:"/api/tutorials/reading-owners",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/reading-owners.md"},i="Reading Owners On Datasets/Columns",s={unversionedId:"docs/api/tutorials/reading-owners",id:"docs/api/tutorials/reading-owners",title:"Reading Owners On Datasets/Columns",description:"Why Would You Read Owners?",source:"@site/genDocs/docs/api/tutorials/reading-owners.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/reading-owners",permalink:"/docs/api/tutorials/reading-owners",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/reading-owners.md",tags:[],version:"current",frontMatter:{title:"Reading Owners On Datasets/Columns",slug:"/api/tutorials/reading-owners",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/reading-owners.md"},sidebar:"overviewSidebar",previous:{title:"Reading Domains On Datasets/Columns",permalink:"/docs/api/tutorials/reading-domains"},next:{title:"Reading Deprecation On Datasets",permalink:"/docs/api/tutorials/reading-deprecation"}},l={},p=[{value:"Why Would You Read Owners?",id:"why-would-you-read-owners",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Read Owners With GraphQL",id:"read-owners-with-graphql",level:2},{value:"GraphQL Explorer",id:"graphql-explorer",level:3},{value:"CURL",id:"curl",level:3},{value:"Read Owners With Python SDK",id:"read-owners-with-python-sdk",level:2}],u={toc:p};function d(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"reading-owners-on-datasetscolumns"},"Reading Owners On Datasets/Columns"),(0,r.kt)("h2",{id:"why-would-you-read-owners"},"Why Would You Read Owners?"),(0,r.kt)("p",null,"Assigning an owner to an entity helps to establish accountability for the metadata and collaborating as a team.\nIf there are any issues or questions about the data, the designated owner can serve as a reliable point of contact."),(0,r.kt)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,r.kt)("p",null,"This guide will show you how to read owners attached to a dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"SampleHiveDataset"),"."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed steps, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/quickstart"},"Datahub Quickstart Guide"),"."),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Before reading owners, you need to ensure the targeted dataset and the owner are already present in your datahub.\nIf you attempt to manipulate entities that do not exist, your operation will fail.\nIn this guide, we will be using data from a sample ingestion.")),(0,r.kt)("h2",{id:"read-owners-with-graphql"},"Read Owners With GraphQL"),(0,r.kt)("admonition",{type:"note"},(0,r.kt)("p",{parentName:"admonition"},"Please note that there are two available endpoints (",(0,r.kt)("inlineCode",{parentName:"p"},":8000"),", ",(0,r.kt)("inlineCode",{parentName:"p"},":9002"),") to access ",(0,r.kt)("inlineCode",{parentName:"p"},"graphql"),".\nFor more information about the differences between these endpoints, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/metadata-service#graphql-api"},"DataHub Metadata Service"))),(0,r.kt)("h3",{id:"graphql-explorer"},"GraphQL Explorer"),(0,r.kt)("p",null,"GraphQL Explorer is the fastest way to experiment with GraphQL without any dependencies.\nNavigate to GraphQL Explorer (",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:9002/api/graphiql"),") and run the following query."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'query {\n  dataset(urn: "urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)") {\n    ownership {\n      owners {\n        owner {\n          ... on CorpUser {\n            urn\n            type\n          }\n          ... on CorpGroup {\n            urn\n            type\n          }\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If you see the following response, the operation was successful:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'{\n  "data": {\n    "dataset": {\n      "ownership": {\n        "owners": [\n          {\n            "owner": {\n              "urn": "urn:li:corpuser:jdoe",\n              "type": "CORP_USER"\n            }\n          },\n          {\n            "owner": {\n              "urn": "urn:li:corpuser:datahub",\n              "type": "CORP_USER"\n            }\n          }\n        ]\n      }\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.kt)("h3",{id:"curl"},"CURL"),(0,r.kt)("p",null,"With CURL, you need to provide tokens. To generate a token, please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/api/graphql/token-management"},"Access Token Management"),".\nWith ",(0,r.kt)("inlineCode",{parentName:"p"},"accessToken"),", you can run the following command."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl --location --request POST 'http://localhost:8080/api/graphql' \\\n--header 'Authorization: Bearer <my-access-token>' \\\n--header 'Content-Type: application/json' \\\n--data-raw '{ \"query\": \"{ dataset(urn: \\\"urn:li:dataset:(urn:li:dataPlatform:hive,SampleHiveDataset,PROD)\\\") { ownership { owners { owner { ... on CorpUser { urn type } ... on CorpGroup { urn type } } } } } }\", \"variables\":{}}'\n")),(0,r.kt)("p",null,"Expected Response:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "data": {\n    "dataset": {\n      "ownership": {\n        "owners": [\n          { "owner": { "urn": "urn:li:corpuser:jdoe", "type": "CORP_USER" } },\n          { "owner": { "urn": "urn:li:corpuser:datahub", "type": "CORP_USER" } }\n        ]\n      }\n    }\n  },\n  "extensions": {}\n}\n')),(0,r.kt)("h2",{id:"read-owners-with-python-sdk"},"Read Owners With Python SDK"),(0,r.kt)("p",null,"The following code reads owners attached to a dataset ",(0,r.kt)("inlineCode",{parentName:"p"},"fct_users_created"),"."),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Coming Soon!")),(0,r.kt)("p",null,"We're using the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetdataChangeProposalWrapper")," to change entities in this example.\nFor more information about the ",(0,r.kt)("inlineCode",{parentName:"p"},"MetadataChangeProposal"),", please refer to ",(0,r.kt)("a",{parentName:"p",href:"/docs/advanced/mcp-mcl"},"MetadataChangeProposal & MetadataChangeLog Events")))}d.isMDXComponent=!0}}]);