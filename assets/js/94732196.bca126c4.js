"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[3580],{3905:function(e,n,t){t.d(n,{Zo:function(){return l},kt:function(){return p}});var a=t(67294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,o=function(e,n){if(null==e)return{};var t,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=a.createContext({}),c=function(e){var n=a.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},l=function(e){var n=c(e.components);return a.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,o=e.mdxType,r=e.originalType,u=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),m=c(t),p=o,g=m["".concat(u,".").concat(p)]||m[p]||d[p]||r;return t?a.createElement(g,i(i({ref:n},l),{},{components:t})):a.createElement(g,i({ref:n},l))}));function p(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var r=t.length,i=new Array(r);i[0]=m;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<r;c++)i[c]=t[c];return a.createElement.apply(null,i)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},74068:function(e,n,t){t.r(n),t.d(n,{frontMatter:function(){return s},contentTitle:function(){return u},metadata:function(){return c},toc:function(){return l},default:function(){return m}});var a=t(87462),o=t(63366),r=(t(67294),t(3905)),i=["components"],s={sidebar_position:27,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},u="DataHubIngestionSource",c={unversionedId:"docs/generated/metamodel/entities/dataHubIngestionSource",id:"docs/generated/metamodel/entities/dataHubIngestionSource",isDocsHomePage:!1,title:"DataHubIngestionSource",description:"Aspects",source:"@site/genDocs/docs/generated/metamodel/entities/dataHubIngestionSource.md",sourceDirName:"docs/generated/metamodel/entities",slug:"/generated/metamodel/entities/datahubingestionsource",permalink:"/docs/generated/metamodel/entities/datahubingestionsource",editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md",tags:[],version:"current",sidebarPosition:27,frontMatter:{sidebar_position:27,title:"DataHubIngestionSource",slug:"/generated/metamodel/entities/datahubingestionsource",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/generated/metamodel/entities/dataHubIngestionSource.md"},sidebar:"overviewSidebar",previous:{title:"DataHubPolicy",permalink:"/docs/generated/metamodel/entities/datahubpolicy"},next:{title:"DataHubSecret",permalink:"/docs/generated/metamodel/entities/datahubsecret"}},l=[{value:"Aspects",id:"aspects",children:[{value:"dataHubIngestionSourceInfo",id:"datahubingestionsourceinfo",children:[],level:3}],level:2},{value:"Relationships",id:"relationships",children:[{value:"Incoming",id:"incoming",children:[],level:3}],level:2},{value:"Global Metadata Model",id:"global-metadata-model",children:[],level:2}],d={toc:l};function m(e){var n=e.components,t=(0,o.Z)(e,i);return(0,r.kt)("wrapper",(0,a.Z)({},d,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"datahubingestionsource"},"DataHubIngestionSource"),(0,r.kt)("h2",{id:"aspects"},"Aspects"),(0,r.kt)("h3",{id:"datahubingestionsourceinfo"},"dataHubIngestionSourceInfo"),(0,r.kt)("p",null,"Info about a DataHub ingestion source"),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Schema"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-javascript"},'{\n  "type": "record",\n  "Aspect": {\n    "name": "dataHubIngestionSourceInfo"\n  },\n  "name": "DataHubIngestionSourceInfo",\n  "namespace": "com.linkedin.ingestion",\n  "fields": [\n    {\n      "Searchable": {\n        "fieldType": "TEXT_PARTIAL"\n      },\n      "type": "string",\n      "name": "name",\n      "doc": "The display name of the ingestion source"\n    },\n    {\n      "type": "string",\n      "name": "type",\n      "doc": "The type of the source itself, e.g. mysql, bigquery, bigquery-usage. Should match the recipe."\n    },\n    {\n      "java": {\n        "class": "com.linkedin.common.urn.Urn"\n      },\n      "type": [\n        "null",\n        "string"\n      ],\n      "name": "platform",\n      "default": null,\n      "doc": "Data Platform URN associated with the source"\n    },\n    {\n      "type": [\n        "null",\n        {\n          "type": "record",\n          "name": "DataHubIngestionSourceSchedule",\n          "namespace": "com.linkedin.ingestion",\n          "fields": [\n            {\n              "type": "string",\n              "name": "interval",\n              "doc": "A cron-formatted execution interval, as a cron string, e.g. * * * * *"\n            },\n            {\n              "type": "string",\n              "name": "timezone",\n              "doc": "Timezone in which the cron interval applies, e.g. America/Los Angeles"\n            }\n          ],\n          "doc": "The schedule associated with an ingestion source."\n        }\n      ],\n      "name": "schedule",\n      "default": null,\n      "doc": "The schedule on which the ingestion source is executed"\n    },\n    {\n      "type": {\n        "type": "record",\n        "name": "DataHubIngestionSourceConfig",\n        "namespace": "com.linkedin.ingestion",\n        "fields": [\n          {\n            "type": "string",\n            "name": "recipe",\n            "doc": "The JSON recipe to use for ingestion"\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "version",\n            "default": null,\n            "doc": "The PyPI version of the datahub CLI to use when executing a recipe"\n          },\n          {\n            "type": [\n              "null",\n              "string"\n            ],\n            "name": "executorId",\n            "default": null,\n            "doc": "The id of the executor to use to execute the ingestion run"\n          },\n          {\n            "type": [\n              "null",\n              "boolean"\n            ],\n            "name": "debugMode",\n            "default": null,\n            "doc": "Whether or not to run this ingestion source in debug mode"\n          }\n        ]\n      },\n      "name": "config",\n      "doc": "Parameters associated with the Ingestion Source"\n    }\n  ],\n  "doc": "Info about a DataHub ingestion source"\n}\n'))),(0,r.kt)("h2",{id:"relationships"},"Relationships"),(0,r.kt)("h3",{id:"incoming"},"Incoming"),(0,r.kt)("p",null,"These are the relationships stored in other entity's aspects"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("p",{parentName:"li"},"ingestionSource"),(0,r.kt)("ul",{parentName:"li"},(0,r.kt)("li",{parentName:"ul"},"DataHubExecutionRequest via ",(0,r.kt)("inlineCode",{parentName:"li"},"dataHubExecutionRequestInput.source.ingestionSource"))))),(0,r.kt)("h2",{id:"global-metadata-model"},(0,r.kt)("a",{parentName:"h2",href:"https://github.com/datahub-project/datahub/raw/master/docs/imgs/datahub-metadata-model.png"},"Global Metadata Model")),(0,r.kt)("p",null,(0,r.kt)("img",{parentName:"p",src:"https://github.com/datahub-project/datahub/raw/master/docs/imgs/datahub-metadata-model.png",alt:"Global Graph"})))}m.isMDXComponent=!0}}]);