"use strict";(self.webpackChunkdocs_website=self.webpackChunkdocs_website||[]).push([[8402],{3905:(e,t,a)=>{a.d(t,{Zo:()=>p,kt:()=>c});var r=a(67294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function s(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?s(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):s(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},s=Object.keys(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)a=s[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var d=r.createContext({}),l=function(e){var t=r.useContext(d),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},p=function(e){var t=l(e.components);return r.createElement(d.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},u=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,s=e.originalType,d=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),u=l(a),c=n,h=u["".concat(d,".").concat(c)]||u[c]||m[c]||s;return a?r.createElement(h,i(i({ref:t},p),{},{components:a})):r.createElement(h,i({ref:t},p))}));function c(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var s=a.length,i=new Array(s);i[0]=u;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:n,i[1]=o;for(var l=2;l<s;l++)i[l]=a[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}u.displayName="MDXCreateElement"},12467:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>d,contentTitle:()=>i,default:()=>m,frontMatter:()=>s,metadata:()=>o,toc:()=>l});var r=a(83117),n=(a(67294),a(3905));const s={title:"Creating Datasets",slug:"/api/tutorials/creating-datasets",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-datasets.md"},i="Creating Datasets",o={unversionedId:"docs/api/tutorials/creating-datasets",id:"docs/api/tutorials/creating-datasets",title:"Creating Datasets",description:"Why Would You Create Datasets?",source:"@site/genDocs/docs/api/tutorials/creating-datasets.md",sourceDirName:"docs/api/tutorials",slug:"/api/tutorials/creating-datasets",permalink:"/docs/api/tutorials/creating-datasets",draft:!1,editUrl:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-datasets.md",tags:[],version:"current",frontMatter:{title:"Creating Datasets",slug:"/api/tutorials/creating-datasets",custom_edit_url:"https://github.com/datahub-project/datahub/blob/master/docs/api/tutorials/creating-datasets.md"},sidebar:"overviewSidebar",previous:{title:"Aspect Versioning",permalink:"/docs/advanced/aspect-versioning"},next:{title:"Creating Tags",permalink:"/docs/api/tutorials/creating-tags"}},d={},l=[{value:"Why Would You Create Datasets?",id:"why-would-you-create-datasets",level:2},{value:"Goal Of This Guide",id:"goal-of-this-guide",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Create Datasets With GraphQL (Not Supported)",id:"create-datasets-with-graphql-not-supported",level:2},{value:"Create Datasets With Python SDK",id:"create-datasets-with-python-sdk",level:2},{value:"Add Lineage",id:"add-lineage",level:3},{value:"Add custom properties",id:"add-custom-properties",level:3},{value:"Expected Outcomes",id:"expected-outcomes",level:2},{value:"What&#39;s Next?",id:"whats-next",level:2}],p={toc:l};function m(e){let{components:t,...s}=e;return(0,n.kt)("wrapper",(0,r.Z)({},p,s,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"creating-datasets"},"Creating Datasets"),(0,n.kt)("h2",{id:"why-would-you-create-datasets"},"Why Would You Create Datasets?"),(0,n.kt)("p",null,"The dataset entity is one the most important entities in the metadata model. They represent collections of data that are typically represented as Tables or Views in a database (e.g. BigQuery, Snowflake, Redshift etc.), Streams in a stream-processing environment (Kafka, Pulsar etc.), bundles of data found as Files or Folders in data lake systems (S3, ADLS, etc.).\nFor more information about datasets, refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/generated/metamodel/entities/dataset"},"Dataset"),"."),(0,n.kt)("h3",{id:"goal-of-this-guide"},"Goal Of This Guide"),(0,n.kt)("p",null,"This guide will show you how to create a dataset named ",(0,n.kt)("inlineCode",{parentName:"p"},"realestate_db.sales")," with three columns."),(0,n.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,n.kt)("p",null,"For this tutorial, you need to deploy DataHub Quickstart and ingest sample data.\nFor detailed steps, please refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/quickstart"},"Datahub Quickstart Guide"),"."),(0,n.kt)("h2",{id:"create-datasets-with-graphql-not-supported"},"Create Datasets With GraphQL (Not Supported)"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"\ud83d\udeab Creating a dataset via ",(0,n.kt)("inlineCode",{parentName:"p"},"graphql")," is currently not supported.\nPlease check out ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/datahub-apis#datahub-api-comparison"},"API feature comparison table")," for more information,")),(0,n.kt)("h2",{id:"create-datasets-with-python-sdk"},"Create Datasets With Python SDK"),(0,n.kt)("p",null,"The following code creates a Hive dataset named realestate_db.sales with three fields and a URN of urn:li:dataset:(urn:li:dataPlatform:hive,realestate_db.sales,PROD):"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_schema.py\n# Imports for urn construction utility methods\nfrom datahub.emitter.mce_builder import make_data_platform_urn, make_dataset_urn\nfrom datahub.emitter.mcp import MetadataChangeProposalWrapper\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Imports for metadata model classes\nfrom datahub.metadata.schema_classes import (\n    AuditStampClass,\n    DateTypeClass,\n    OtherSchemaClass,\n    SchemaFieldClass,\n    SchemaFieldDataTypeClass,\n    SchemaMetadataClass,\n    StringTypeClass,\n)\n\nevent: MetadataChangeProposalWrapper = MetadataChangeProposalWrapper(\n    entityUrn=make_dataset_urn(platform="hive", name="realestate_db.sales", env="PROD"),\n    aspect=SchemaMetadataClass(\n        schemaName="customer",  # not used\n        platform=make_data_platform_urn("hive"),  # important <- platform must be an urn\n        version=0,  # when the source system has a notion of versioning of schemas, insert this in, otherwise leave as 0\n        hash="",  # when the source system has a notion of unique schemas identified via hash, include a hash, else leave it as empty string\n        platformSchema=OtherSchemaClass(rawSchema="__insert raw schema here__"),\n        lastModified=AuditStampClass(\n            time=1640692800000, actor="urn:li:corpuser:ingestion"\n        ),\n        fields=[\n            SchemaFieldClass(\n                fieldPath="address.zipcode",\n                type=SchemaFieldDataTypeClass(type=StringTypeClass()),\n                nativeDataType="VARCHAR(50)",  # use this to provide the type of the field in the source system\'s vernacular\n                description="This is the zipcode of the address. Specified using extended form and limited to addresses in the United States",\n                lastModified=AuditStampClass(\n                    time=1640692800000, actor="urn:li:corpuser:ingestion"\n                ),\n            ),\n            SchemaFieldClass(\n                fieldPath="address.street",\n                type=SchemaFieldDataTypeClass(type=StringTypeClass()),\n                nativeDataType="VARCHAR(100)",\n                description="Street corresponding to the address",\n                lastModified=AuditStampClass(\n                    time=1640692800000, actor="urn:li:corpuser:ingestion"\n                ),\n            ),\n            SchemaFieldClass(\n                fieldPath="last_sold_date",\n                type=SchemaFieldDataTypeClass(type=DateTypeClass()),\n                nativeDataType="Date",\n                description="Date of the last sale date for this property",\n                created=AuditStampClass(\n                    time=1640692800000, actor="urn:li:corpuser:ingestion"\n                ),\n                lastModified=AuditStampClass(\n                    time=1640692800000, actor="urn:li:corpuser:ingestion"\n                ),\n            ),\n        ],\n    ),\n)\n\n# Create rest emitter\nrest_emitter = DatahubRestEmitter(gms_server="http://localhost:8080")\nrest_emitter.emit(event)\n\n')),(0,n.kt)("p",null,"Note that the ",(0,n.kt)("inlineCode",{parentName:"p"},"name")," property of ",(0,n.kt)("inlineCode",{parentName:"p"},"make_dataset_urn")," sets the display name of the dataset."),(0,n.kt)("p",null,"After creating the dataset, you can perform various manipulations, such as adding lineage and custom properties.\nHere are some steps to start with, but for more detailed guidance, please refer to the ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/tutorials/creating-datasets#whats-next"},"What's Next")," section."),(0,n.kt)("h3",{id:"add-lineage"},"Add Lineage"),(0,n.kt)("p",null,"The following code creates a lineage from ",(0,n.kt)("inlineCode",{parentName:"p"},"fct_users_deleted")," to ",(0,n.kt)("inlineCode",{parentName:"p"},"realestate_db.sales"),":"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'import datahub.emitter.mce_builder as builder\nfrom datahub.emitter.rest_emitter import DatahubRestEmitter\n\n# Construct a lineage object.\nlineage_mce = builder.make_lineage_mce(\n    [\n        builder.make_dataset_urn("hive", "fct_users_deleted"), # Upstream\n    ],\n    builder.make_dataset_urn("hive", "realestate_db.sales"), # Downstream\n)\n\n# Create an emitter to the GMS REST API.\nemitter = DatahubRestEmitter("http://localhost:8080")\n\n# Emit metadata!\nemitter.emit_mce(lineage_mce)\n')),(0,n.kt)("p",null,"For more information on adding lineages, please refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/tutorials/adding-lineage#add-lineage-with-python-sdk"},"how to add lineage on a dataset using PythonSDK"),"."),(0,n.kt)("h3",{id:"add-custom-properties"},"Add custom properties"),(0,n.kt)("p",null,"You can also set custom properties using the following code:"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre",className:"language-python"},'# Inlined from /metadata-ingestion/examples/library/dataset_add_properties.py\nimport logging\nfrom typing import Union\n\nfrom datahub.configuration.kafka import KafkaProducerConnectionConfig\nfrom datahub.emitter.kafka_emitter import DatahubKafkaEmitter, KafkaEmitterConfig\nfrom datahub.emitter.mce_builder import make_dataset_urn\nfrom datahub.emitter.rest_emitter import DataHubRestEmitter\nfrom datahub.specific.dataset import DatasetPatchBuilder\n\nlog = logging.getLogger(__name__)\nlogging.basicConfig(level=logging.INFO)\n\n\n# Get an emitter, either REST or Kafka, this example shows you both\ndef get_emitter() -> Union[DataHubRestEmitter, DatahubKafkaEmitter]:\n    USE_REST_EMITTER = True\n    if USE_REST_EMITTER:\n        gms_endpoint = "http://localhost:8080"\n        return DataHubRestEmitter(gms_server=gms_endpoint)\n    else:\n        kafka_server = "localhost:9092"\n        schema_registry_url = "http://localhost:8081"\n        return DatahubKafkaEmitter(\n            config=KafkaEmitterConfig(\n                connection=KafkaProducerConnectionConfig(\n                    bootstrap=kafka_server, schema_registry_url=schema_registry_url\n                )\n            )\n        )\n\n\ndataset_urn = make_dataset_urn(platform="hive", name="fct_users_created", env="PROD")\n\nwith get_emitter() as emitter:\n    for patch_mcp in (\n        DatasetPatchBuilder(dataset_urn)\n        .add_custom_property("cluster_name", "datahubproject.acryl.io")\n        .add_custom_property("retention_time", "2 years")\n        .build()\n    ):\n        emitter.emit(patch_mcp)\n\n\nlog.info(f"Added cluster_name, retention_time properties to dataset {dataset_urn}")\n\n')),(0,n.kt)("p",null,"For more information on adding custom properties, please refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/api/tutorials/modifying-dataset-custom-properties"},"Modifying Custom Properties on Datasets")),(0,n.kt)("p",null,"We're using the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetdataChangeProposalWrapper")," to change entities in this example.\nFor more information about the ",(0,n.kt)("inlineCode",{parentName:"p"},"MetadataChangeProposal"),", please refer to ",(0,n.kt)("a",{parentName:"p",href:"/docs/advanced/mcp-mcl"},"MetadataChangeProposal & MetadataChangeLog Events"),"."),(0,n.kt)("h2",{id:"expected-outcomes"},"Expected Outcomes"),(0,n.kt)("p",null,"You can now see ",(0,n.kt)("inlineCode",{parentName:"p"},"realestate_db.sales")," dataset has been created."),(0,n.kt)("p",null,(0,n.kt)("img",{alt:"dataset-created",src:a(13193).Z,width:"1193",height:"614"})),(0,n.kt)("h2",{id:"whats-next"},"What's Next?"),(0,n.kt)("p",null,"Now that you created a dataset, how about enriching it? Here are some guides that you can check out."),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/api/tutorials/adding-tags"},"how to add a tag on a dataset"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/api/tutorials/adding-terms"},"how to add a term on a dataset"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/api/tutorials/adding-ownerships"},"how to add owner on a dataset"),"."),(0,n.kt)("li",{parentName:"ul"},(0,n.kt)("a",{parentName:"li",href:"/docs/api/tutorials/adding-lineage"},"how to add lineage on a dataset"),".")))}m.isMDXComponent=!0},13193:(e,t,a)=>{a.d(t,{Z:()=>r});const r=a.p+"assets/images/dataset-created-bef83f51ef1b1dab57e2fd531a4edd83.png"}}]);